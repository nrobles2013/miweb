{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./layout.service\";\nexport let CustomizerService = /*#__PURE__*/(() => {\n  class CustomizerService {\n    constructor(router, layout) {\n      this.router = router;\n      this.layout = layout;\n      this.colors = [{\n        class: \"black\",\n        active: false\n      }, {\n        class: \"white\",\n        active: false\n      }, {\n        class: \"dark-blue\",\n        active: false\n      }, {\n        class: \"grey\",\n        active: false\n      }, {\n        class: \"brown\",\n        active: false\n      }, {\n        class: \"gray\",\n        active: false\n      }, {\n        class: \"purple\",\n        active: false\n      }, {\n        class: \"blue\",\n        active: false\n      }, {\n        class: \"indigo\",\n        active: false\n      }, {\n        class: \"yellow\",\n        active: false\n      }, {\n        class: \"green\",\n        active: false\n      }, {\n        class: \"pink\",\n        active: false\n      }, {\n        class: \"red\",\n        active: false\n      }, {\n        class: \"slate\",\n        active: false\n      }];\n      this.topbarColors = this.getTopbarColors();\n      this.sidebarColors = this.getSidebarColors();\n      this.footerColors = this.getFooterColors();\n    }\n    getSidebarColors() {\n      let sidebarColors = ['black', 'slate', 'white', 'grey', 'brown', 'purple', 'dark-blue'];\n      return this.colors.filter(color => {\n        return sidebarColors.includes(color.class);\n      }).map(c => {\n        c.active = c.class === this.layout.layoutConf.sidebarColor;\n        return {\n          ...c\n        };\n      });\n    }\n    getTopbarColors() {\n      let topbarColors = ['black', 'slate', 'white', 'dark-gray', 'purple', 'dark-blue', 'indigo', 'pink', 'red', 'yellow', 'green'];\n      return this.colors.filter(color => {\n        return topbarColors.includes(color.class);\n      }).map(c => {\n        c.active = c.class === this.layout.layoutConf.topbarColor;\n        return {\n          ...c\n        };\n      });\n    }\n    getFooterColors() {\n      let footerColors = ['black', 'slate', 'white', 'dark-gray', 'purple', 'dark-blue', 'indigo', 'pink', 'red', 'yellow', 'green'];\n      return this.colors.filter(color => {\n        return footerColors.includes(color.class);\n      }).map(c => {\n        c.active = c.class === this.layout.layoutConf.footerColor;\n        return {\n          ...c\n        };\n      });\n    }\n    changeSidebarColor(color) {\n      this.layout.publishLayoutChange({\n        sidebarColor: color.class\n      });\n      this.sidebarColors = this.getSidebarColors();\n    }\n    changeTopbarColor(color) {\n      this.layout.publishLayoutChange({\n        topbarColor: color.class\n      });\n      this.topbarColors = this.getTopbarColors();\n    }\n    changeFooterColor(color) {\n      this.layout.publishLayoutChange({\n        footerColor: color.class\n      });\n      this.footerColors = this.getFooterColors();\n    }\n    removeClass(el, className) {\n      if (!el || el.length === 0) return;\n      if (!el.length) {\n        el.classList.remove(className);\n      } else {\n        for (var i = 0; i < el.length; i++) {\n          el[i].classList.remove(className);\n        }\n      }\n    }\n    addClass(el, className) {\n      if (!el) return;\n      if (!el.length) {\n        el.classList.add(className);\n      } else {\n        for (var i = 0; i < el.length; i++) {\n          el[i].classList.add(className);\n        }\n      }\n    }\n    findClosest(el, className) {\n      if (!el) return;\n      while (el) {\n        var parent = el.parentElement;\n        if (parent && this.hasClass(parent, className)) {\n          return parent;\n        }\n        el = parent;\n      }\n    }\n    hasClass(el, className) {\n      if (!el) return;\n      return ` ${el.className} `.replace(/[\\n\\t]/g, \" \").indexOf(` ${className} `) > -1;\n    }\n    toggleClass(el, className) {\n      if (!el) return;\n      if (this.hasClass(el, className)) {\n        this.removeClass(el, className);\n      } else {\n        this.addClass(el, className);\n      }\n    }\n  }\n  CustomizerService.ɵfac = function CustomizerService_Factory(t) {\n    return new (t || CustomizerService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.LayoutService));\n  };\n  CustomizerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CustomizerService,\n    factory: CustomizerService.ɵfac,\n    providedIn: \"root\"\n  });\n  return CustomizerService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}