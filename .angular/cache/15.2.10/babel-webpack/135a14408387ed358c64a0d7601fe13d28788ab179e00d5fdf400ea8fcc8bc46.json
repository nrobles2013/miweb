{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { getQueryParam } from '../helpers/url.helper';\nimport * as i0 from \"@angular/core\";\nexport let ThemeService = /*#__PURE__*/(() => {\n  class ThemeService {\n    constructor(document, rendererFactory) {\n      this.document = document;\n      this.onThemeChange = new EventEmitter();\n      this.egretThemes = [{\n        'name': 'egret-navy',\n        'baseColor': '#10174c',\n        'isActive': false\n      }, {\n        'name': 'egret-navy-dark',\n        'baseColor': '#0081ff',\n        'isActive': false\n      }];\n      this.renderer = rendererFactory.createRenderer(null, null);\n    }\n    // Invoked in AppComponent and apply 'activatedTheme' on startup\n    applyMatTheme(themeName) {\n      this.activatedTheme = this.egretThemes.find(t => t.name === themeName);\n      this.flipActiveFlag(themeName);\n      // *********** ONLY FOR DEMO **********\n      this.setThemeFromQuery();\n      // ************************************\n      // this.changeTheme(themeName);\n      this.renderer.addClass(this.document.body, themeName);\n    }\n    changeTheme(prevTheme, themeName) {\n      this.renderer.removeClass(this.document.body, prevTheme);\n      this.renderer.addClass(this.document.body, themeName);\n      this.flipActiveFlag(themeName);\n      this.onThemeChange.emit(this.activatedTheme);\n    }\n    flipActiveFlag(themeName) {\n      this.egretThemes.forEach(t => {\n        t.isActive = false;\n        if (t.name === themeName) {\n          t.isActive = true;\n          this.activatedTheme = t;\n        }\n      });\n    }\n    // *********** ONLY FOR DEMO **********\n    setThemeFromQuery() {\n      const themeStr = getQueryParam('theme');\n      try {\n        this.activatedTheme = JSON.parse(themeStr);\n        console.log(this.activatedTheme);\n        this.flipActiveFlag(this.activatedTheme.name);\n      } catch (e) {}\n    }\n  }\n  ThemeService.ɵfac = function ThemeService_Factory(t) {\n    return new (t || ThemeService)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i0.RendererFactory2));\n  };\n  ThemeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ThemeService,\n    factory: ThemeService.ɵfac\n  });\n  return ThemeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}