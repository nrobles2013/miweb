{"ast":null,"code":"/*\nLanguage: Monkey\nDescription: Monkey2 is an easy to use, cross platform, games oriented programming language from Blitz Research.\nAuthor: Arthur Bikmullin <devolonter@gmail.com>\nWebsite: https://blitzresearch.itch.io/monkey2\n*/\n\nfunction monkey(hljs) {\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [{\n      begin: '[$][a-fA-F0-9]+'\n    }, hljs.NUMBER_MODE]\n  };\n  const FUNC_DEFINITION = {\n    variants: [{\n      match: [/(function|method)/, /\\s+/, hljs.UNDERSCORE_IDENT_RE]\n    }],\n    scope: {\n      1: \"keyword\",\n      3: \"title.function\"\n    }\n  };\n  const CLASS_DEFINITION = {\n    variants: [{\n      match: [/(class|interface|extends|implements)/, /\\s+/, hljs.UNDERSCORE_IDENT_RE]\n    }],\n    scope: {\n      1: \"keyword\",\n      3: \"title.class\"\n    }\n  };\n  const BUILT_INS = [\"DebugLog\", \"DebugStop\", \"Error\", \"Print\", \"ACos\", \"ACosr\", \"ASin\", \"ASinr\", \"ATan\", \"ATan2\", \"ATan2r\", \"ATanr\", \"Abs\", \"Abs\", \"Ceil\", \"Clamp\", \"Clamp\", \"Cos\", \"Cosr\", \"Exp\", \"Floor\", \"Log\", \"Max\", \"Max\", \"Min\", \"Min\", \"Pow\", \"Sgn\", \"Sgn\", \"Sin\", \"Sinr\", \"Sqrt\", \"Tan\", \"Tanr\", \"Seed\", \"PI\", \"HALFPI\", \"TWOPI\"];\n  const LITERALS = [\"true\", \"false\", \"null\"];\n  const KEYWORDS = [\"public\", \"private\", \"property\", \"continue\", \"exit\", \"extern\", \"new\", \"try\", \"catch\", \"eachin\", \"not\", \"abstract\", \"final\", \"select\", \"case\", \"default\", \"const\", \"local\", \"global\", \"field\", \"end\", \"if\", \"then\", \"else\", \"elseif\", \"endif\", \"while\", \"wend\", \"repeat\", \"until\", \"forever\", \"for\", \"to\", \"step\", \"next\", \"return\", \"module\", \"inline\", \"throw\", \"import\",\n  // not positive, but these are not literals\n  \"and\", \"or\", \"shl\", \"shr\", \"mod\"];\n  return {\n    name: 'Monkey',\n    case_insensitive: true,\n    keywords: {\n      keyword: KEYWORDS,\n      built_in: BUILT_INS,\n      literal: LITERALS\n    },\n    illegal: /\\/\\*/,\n    contains: [hljs.COMMENT('#rem', '#end'), hljs.COMMENT(\"'\", '$', {\n      relevance: 0\n    }), FUNC_DEFINITION, CLASS_DEFINITION, {\n      className: 'variable.language',\n      begin: /\\b(self|super)\\b/\n    }, {\n      className: 'meta',\n      begin: /\\s*#/,\n      end: '$',\n      keywords: {\n        keyword: 'if else elseif endif end then'\n      }\n    }, {\n      match: [/^\\s*/, /strict\\b/],\n      scope: {\n        2: \"meta\"\n      }\n    }, {\n      beginKeywords: 'alias',\n      end: '=',\n      contains: [hljs.UNDERSCORE_TITLE_MODE]\n    }, hljs.QUOTE_STRING_MODE, NUMBER]\n  };\n}\nmodule.exports = monkey;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}