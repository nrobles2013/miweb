{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { getQueryParam } from '../helpers/url.helper';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./theme.service\";\nexport let LayoutService = /*#__PURE__*/(() => {\n  class LayoutService {\n    constructor(themeService) {\n      this.themeService = themeService;\n      this.layoutConf = {};\n      this.layoutConfSubject = new BehaviorSubject(this.layoutConf);\n      this.layoutConf$ = this.layoutConfSubject.asObservable();\n      //   public fullWidthRoutes = ['shop'];\n      this.fullWidthRoutes = [];\n      this.setAppLayout(\n      // ******** SET YOUR LAYOUT OPTIONS HERE *********\n      {\n        navigationPos: 'side',\n        sidebarStyle: 'full',\n        sidebarColor: 'slate',\n        sidebarCompactToggle: false,\n        dir: 'ltr',\n        useBreadcrumb: true,\n        topbarFixed: false,\n        footerFixed: false,\n        topbarColor: 'white',\n        footerColor: 'slate',\n        matTheme: 'egret-navy',\n        breadcrumb: 'simple',\n        perfectScrollbar: true\n      });\n    }\n    setAppLayout(layoutConf) {\n      this.layoutConf = {\n        ...this.layoutConf,\n        ...layoutConf\n      };\n      this.applyMatTheme(this.layoutConf.matTheme);\n      // ******* Only for demo purpose ***\n      this.setLayoutFromQuery();\n      // **********************\n    }\n\n    publishLayoutChange(lc, opt = {}) {\n      if (this.layoutConf.matTheme !== lc.matTheme && lc.matTheme) {\n        this.themeService.changeTheme(this.layoutConf.matTheme, lc.matTheme);\n      }\n      this.layoutConf = Object.assign(this.layoutConf, lc);\n      this.layoutConfSubject.next(this.layoutConf);\n    }\n    applyMatTheme(theme) {\n      this.themeService.applyMatTheme(this.layoutConf.matTheme);\n    }\n    setLayoutFromQuery() {\n      const layoutConfString = getQueryParam('layout');\n      const prevTheme = this.layoutConf.matTheme;\n      try {\n        this.layoutConf = JSON.parse(layoutConfString);\n        this.themeService.changeTheme(prevTheme, this.layoutConf.matTheme);\n      } catch (e) {}\n    }\n    adjustLayout(options = {}) {\n      let sidebarStyle;\n      this.isMobile = this.isSm();\n      this.currentRoute = options.route || this.currentRoute;\n      sidebarStyle = this.isMobile ? 'closed' : 'full';\n      if (this.currentRoute) {\n        this.fullWidthRoutes.forEach(route => {\n          if (this.currentRoute.indexOf(route) !== -1) {\n            sidebarStyle = 'closed';\n          }\n        });\n      }\n      this.publishLayoutChange({\n        isMobile: this.isMobile,\n        sidebarStyle\n      });\n    }\n    isSm() {\n      return window.matchMedia(`(max-width: 959px)`).matches;\n    }\n  }\n  LayoutService.ɵfac = function LayoutService_Factory(t) {\n    return new (t || LayoutService)(i0.ɵɵinject(i1.ThemeService));\n  };\n  LayoutService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LayoutService,\n    factory: LayoutService.ɵfac,\n    providedIn: 'root'\n  });\n  return LayoutService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}