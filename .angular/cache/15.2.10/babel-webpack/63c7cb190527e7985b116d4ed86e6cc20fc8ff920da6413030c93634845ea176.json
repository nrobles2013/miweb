{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { environment } from 'environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"auth.service\";\nimport * as i3 from \"app/shared/services/auth/jwt-auth.service\";\nexport let RiesgosService = /*#__PURE__*/(() => {\n  class RiesgosService {\n    // Agregar credenciales para otros servicios si es necesario\n    constructor(http, authService, serv) {\n      this.http = http;\n      this.authService = authService;\n      this.serv = serv;\n      this.apiUrl = `${environment.apiURL}/reporte-riesgo`;\n      this.reporteServices = btoa('user:b4530586-15c6-43cf-8c1d-960f426f1986');\n    }\n    getReporteServices() {\n      return this.reporteServices;\n    }\n    // Agregar métodos para obtener credenciales de otros servicios si es necesario\n    enviarAuthServiceComoJson() {\n      // Convertir el objeto AuthService a JSON\n      const authServiceJson = JSON.stringify(this);\n      // Agregar el JSON como parámetro de consulta en la URL\n      const params = new HttpParams().set('authServiceJson', authServiceJson);\n      // Realizar la solicitud GET con los parámetros de consulta\n      this.http.get(this.apiUrl, {\n        params\n      }).subscribe(data => {\n        console.log('Respuesta del servidor:', data);\n      }, error => {\n        console.error('Error en la solicitud:', error);\n      });\n    }\n    listPageable(p, s) {\n      const token = JSON.parse(sessionStorage.getItem(\"JWT_TOKEN\"));\n      return this.http.get(`${this.apiUrl}/pageable?page=${p}&size=${s}`);\n    }\n    obtenerDatos() {\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${this.authService.getReporteServices()}`\n      });\n      return this.http.get(`${this.apiUrl}/datos`, {\n        headers\n      });\n    }\n    getReporteRiesgo(fechaFormateada) {\n      const token = JSON.parse(sessionStorage.getItem(\"JWT_TOKEN\"));\n      console.log(\"getreporteNUEVO\" + this.serv.idtipoparticipe);\n      const url = `${this.apiUrl}/${this.serv.idtipoparticipe}/${fechaFormateada}`;\n      console.log(\"esla info\" + url);\n      return this.http.get(url, {\n        headers: new HttpHeaders().set('Authorization', `Bearer ${token.jwtToken}`).set('Content-Type', 'application/json')\n      });\n    }\n    getReporteRiesgo2(fechaFormateada) {\n      const token = JSON.parse(sessionStorage.getItem(\"JWT_TOKEN\"));\n      console.log(\"getreporte\" + token.jwtToken);\n      const url = `${this.apiUrl}/${fechaFormateada}`;\n      console.log(\"esla info\" + `Bearer ${token.jwtToken}`);\n      return this.http.get(url, {\n        headers: new HttpHeaders().set('Authorization', `Bearer ${token.jwtToken}`).set('Content-Type', 'application/json')\n      });\n    }\n    getDataConf() {\n      return [\n      // {\n      //   prop: 'id',\n      // },\n      {\n        prop: 'CODIGOTCHN',\n        name: 'CODIGOTCHN'\n      }, {\n        prop: 'CMONEDA',\n        name: 'CMONEDA'\n      }, {\n        prop: 'NDOCUMENTO',\n        name: 'NDOCUMENTO'\n      }, {\n        prop: 'tapaterno',\n        name: 'tapaterno'\n      }, {\n        prop: 'tamaterno',\n        name: 'tamaterno'\n      }, {\n        prop: 'tnombres',\n        name: 'tnombres'\n      }, {\n        prop: 'EDAD',\n        name: 'EDAD'\n      }, {\n        prop: 'DNACIMIENTO',\n        name: 'DNACIMIENTO'\n      }, {\n        prop: 'tdireccion',\n        name: 'tdireccion'\n      }, {\n        prop: 'CUBIGEO',\n        name: 'CUBIGEO'\n      }, {\n        prop: 'DEPARTAMENTO',\n        name: 'DEPARTAMENTO'\n      }, {\n        prop: 'PROVINCIA',\n        name: 'PROVINCIA'\n      }, {\n        prop: 'DISTRITO',\n        name: 'DISTRITO'\n      }, {\n        prop: 'cinmueble',\n        name: 'cinmueble'\n      }, {\n        prop: 'actividad',\n        name: 'actividad'\n      }, {\n        prop: 'saldoactual',\n        name: 'saldoactual'\n      }, {\n        prop: 'ESTADO',\n        name: 'ESTADO'\n      }, {\n        prop: 'cuota',\n        name: 'cuota'\n      }, {\n        prop: 'sueldo',\n        name: 'sueldo'\n      }, {\n        prop: 'fdesembolso',\n        name: 'fdesembolso'\n      }, {\n        prop: 'tipooperacion',\n        name: 'tipooperacion'\n      }, {\n        prop: 'SINFOCORP',\n        name: 'SINFOCORP'\n      }, {\n        prop: 'NVALORIZACION',\n        name: 'NVALORIZACION'\n      }, {\n        prop: 'VEDIFICACION',\n        name: 'VEDIFICACION'\n      }, {\n        prop: 'VPROPIEDAD',\n        name: 'VPROPIEDAD'\n      }, {\n        prop: 'VCOMERCIAL',\n        name: 'VCOMERCIAL'\n      }, {\n        prop: 'VREALIZACIONSOL',\n        name: 'VREALIZACIONSOL'\n      }, {\n        prop: 'VREALIZACIONDOL',\n        name: 'VREALIZACIONDOL'\n      }, {\n        prop: 'FVALORIZACION',\n        name: 'FVALORIZACION'\n      }, {\n        prop: 'ncuotasgeneradas',\n        name: 'ncuotasgeneradas'\n      }];\n    }\n  }\n  RiesgosService.ɵfac = function RiesgosService_Factory(t) {\n    return new (t || RiesgosService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.JwtAuthService));\n  };\n  RiesgosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RiesgosService,\n    factory: RiesgosService.ɵfac,\n    providedIn: 'root'\n  });\n  return RiesgosService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}