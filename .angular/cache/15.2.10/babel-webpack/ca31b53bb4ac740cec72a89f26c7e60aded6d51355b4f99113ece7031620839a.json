{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/shared/services/auth/jwt-auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let NavigationService = /*#__PURE__*/(() => {\n  class NavigationService {\n    constructor(jwtAuth, router) {\n      this.jwtAuth = jwtAuth;\n      this.router = router;\n      // este es donde van los itemns del menu\n      this.plainMenu = [];\n      // Icon menu TITLE at the very top of navigation.\n      // This title will appear if any icon type item is present in menu.\n      this.iconTypeMenuTitle = '';\n      // sets iconMenu as default;\n      //menuItems = new BehaviorSubject<IMenuItem[]>(this.plainMenu);\n      // navigation component has subscribed to this Observable\n      //menuItems$ = this.menuItems.asObservable();\n      this.getMenuData = [];\n      this.getDataPass = [];\n      this.objectSourcePass = new BehaviorSubject(this.getDataPass);\n      this.$getObjectSourcePass = this.objectSourcePass.asObservable();\n      this.dataPassItem = this.objectSourcePass;\n      this.dataPassItem$ = this.$getObjectSourcePass;\n      this.objectSource = new BehaviorSubject(this.getMenuData);\n      this.$getObjectSource = this.objectSource.asObservable();\n      this.menuItems = this.objectSource;\n      this.menuItems$ = this.$getObjectSource;\n    }\n    ngOnInit() {}\n    // menu dinamico\n    sendObjectSource(data) {\n      let ItemData = JSON.stringify(data);\n      let tk = JSON.parse(ItemData);\n      let datasql = \"[\";\n      let item = 0;\n      for (let i = 0; i < tk.length; i++) {\n        item = item + 1;\n        if (tk[i].menu.menuPad == tk[i].menu.menu_id && tk[i].menu.flag == \"1\") {\n          let hijosql = \"\";\n          let xcont = 0;\n          for (let hj = 0; hj < tk.length; hj++) {\n            if (tk[i].menu.menu_id == tk[hj].menu.menuPad && tk[hj].menu.menuPad != tk[hj].menu.menu_id && tk[hj].menu.flag == \"1\") {\n              xcont = xcont + 1;\n              if (xcont == 1) {\n                hijosql = '\"sub\":[{\"name\":\"' + tk[hj].menu.titleMenu + '\",\"type\":\"link\",\"icon\":\"' + tk[hj].menu.iconMenu + '\",\"state\":\"' + tk[hj].menu.urlMenu + '\"}';\n              } else {\n                hijosql = hijosql + ',{\"name\":\"' + tk[hj].menu.titleMenu + '\",\"type\":\"link\",\"icon\":\"' + tk[hj].menu.iconMenu + '\",\"state\":\"' + tk[hj].menu.urlMenu + '\"}';\n              }\n            }\n          }\n          hijosql = hijosql + \"]},\";\n          datasql = datasql + '{\"name\":\"' + tk[i].menu.titleMenu + '\",\"type\":\"dropDown\",\"tooltip\":\"' + tk[i].menu.titleMenu + '\",\"icon\":\"' + tk[i].menu.iconMenu + '\",\"state\":\"' + tk[i].menu.titleMenu + '\",' + hijosql;\n        }\n        if (tk[i].menu.menuPad == tk[i].menu.menu_id && tk[i].menu.flag == \"0\") {\n          if (item != tk.length) {\n            datasql = datasql + '{\"name\":\"' + tk[i].menu.titleMenu + '\",\"type\":\"link\",\"tooltip\":\"' + tk[i].menu.titleMenu + '\",\"icon\":\"' + tk[i].menu.iconMenu + '\",\"state\":\"' + tk[i].menu.urlMenu + '\"},';\n          } else {\n            datasql = datasql + '{\"name\":\"' + tk[i].menu.titleMenu + '\",\"type\":\"link\",\"tooltip\":\"' + tk[i].menu.titleMenu + '\",\"icon\":\"' + tk[i].menu.iconMenu + '\",\"state\":\"' + tk[i].menu.urlMenu + '\"}';\n          }\n        }\n      }\n      datasql = datasql + \"]\";\n      let json = JSON.parse(datasql);\n      this.objectSource.next(json);\n    }\n    sendObjectSourcePass(data) {\n      this.objectSourcePass.next(data);\n    }\n    // FOLLOW THE EGRET FULL VERSION TO SEE HOW IT WORKS\n    // Customizer component uses this method to change menu.\n    // You can remove this method and customizer component.\n    // Or you can customize this method to supply different menu for\n    // different user type.\n    publishNavigationChange(menuType) {\n      this.menuItems.next(this.plainMenu);\n      //    switch (menuType) {\n      //      case 'separator-menu':\n      //        this.menuItems.next(this.separatorMenu);\n      //        break;\n      //      case 'icon-menu':\n      //        this.menuItems.next(this.iconMenu);\n      //        break;\n      //      default:\n      //        this.menuItems.next(this.plainMenu);\n      //    }\n    }\n  }\n\n  NavigationService.ɵfac = function NavigationService_Factory(t) {\n    return new (t || NavigationService)(i0.ɵɵinject(i1.JwtAuthService), i0.ɵɵinject(i2.Router));\n  };\n  NavigationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NavigationService,\n    factory: NavigationService.ɵfac\n  });\n  return NavigationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}