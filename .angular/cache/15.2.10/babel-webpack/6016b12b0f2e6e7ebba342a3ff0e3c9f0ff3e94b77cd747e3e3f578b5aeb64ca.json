{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { map, catchError } from \"rxjs/operators\";\nimport { of, BehaviorSubject } from \"rxjs\";\nimport { environment } from \"environments/environment\";\nimport { Auditoria } from \"app/shared/models/auditoria.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../local-store.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../auditoria.service\";\n// ================= only for demo purpose ===========\nconst DEMO_TOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1YjhkNDc4MDc4NmM3MjE3MjBkYzU1NzMiLCJlbWFpbCI6InJhZmkuYm9ncmFAZ21haWwuY29tIiwicm9sZSI6IlNBIiwiYWN0aXZlIjp0cnVlLCJpYXQiOjE1ODc3MTc2NTgsImV4cCI6MTU4ODMyMjQ1OH0.dXw0ySun5ex98dOzTEk0lkmXJvxg3Qgz4ed\";\n/*\r\nconst DEMO_USER: User = {\r\n  id: \"5b700c45639d2c0c54b354ba\",\r\n  displayName: \"Watson Joyce\",\r\n  role: \"SA\",\r\n};\r\n*/\n// ================= you will get those data from server =======\nexport let JwtAuthService = /*#__PURE__*/(() => {\n  class JwtAuthService {\n    constructor(ls, http, router, route, auditoriaService) {\n      this.ls = ls;\n      this.http = http;\n      this.router = router;\n      this.route = route;\n      this.auditoriaService = auditoriaService;\n      this.url = `${environment.apiURLKC}/realms/popularsafi/protocol/openid-connect/token`;\n      this.user = {\n        id: \"5b700c45639d2c0c54b354ba\",\n        displayName: \"Watson Joyce\",\n        role: 'SA',\n        username: '10348298',\n        cparticipe: '99999',\n        usuario_id: 0,\n        idtipoparticipe: '',\n        correo: \"\",\n        pass: \"\"\n      };\n      this.user$ = new BehaviorSubject(this.user);\n      this.JWT_TOKEN = \"JWT_TOKEN\";\n      this.APP_USER = \"EGRET_USER\";\n      this.route.queryParams.subscribe(params => this.return = params['return'] || '/');\n    }\n    traerIP() {\n      return this.http.get(\"https://api.ipify.org/?format=json\");\n    }\n    signin(username, password, tipoparticipe) {\n      this.signingIn = true;\n      const body = `client_id=appsafimovil&client_secret=KmDdV3POdC8jwyVK9JzqyzW0YyO67vTH&grant_type=password&username=${username}&password=${password}`;\n      return this.http.post(this.url, body, {\n        headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8')\n      });\n    }\n    signadd(data) {\n      this.signingIn = true;\n      return this.http.post(`${environment.apiURL}/tokens/user/add`, data);\n    }\n    /*\r\n      checkTokenIsValid is called inside constructor of\r\n      shared/components/layouts/admin-layout/admin-layout.component.ts\r\n    */\n    checkTokenIsValid() {\n      return of(this.user).pipe(map(profile => {\n        this.setUserAndToken(this.getJwtToken(), profile, true);\n        this.signingIn = false;\n        return profile;\n      }), catchError(error => {\n        return of(error);\n      }));\n      /*\r\n        The following code get user data and jwt token is assigned to\r\n        Request header using token.interceptor\r\n        This checks if the existing token is valid when app is reloaded\r\n      */\n      // return this.http.get(`${environment.apiURL}/api/users/profile`)\n      //   .pipe(\n      //     map((profile: User) => {\n      //       this.setUserAndToken(this.getJwtToken(), profile, true);\n      //       return profile;\n      //     }),\n      //     catchError((error) => {\n      //       this.signout();\n      //       return of(error);\n      //     })\n      //   );\n    }\n\n    signout() {\n      this.traerIP().subscribe(data => {\n        let date = new Date();\n        let ip = JSON.stringify(data.ip);\n        this.miip = ip;\n        this.auditoria = new Auditoria(this.miip, this.user.usuario_id, this.user.username, \"Saliendo del sistema\", this.user.idtipoparticipe, this.user.cparticipe, date);\n        this.setUserAndToken(null, null, false);\n        this.auditoriaService.insertar(this.auditoria).subscribe(data => {\n          this.islogin = false;\n          this.router.navigateByUrl(\"sessions/signin\");\n        });\n      }, err => {\n        this.router.navigateByUrl(\"sessions/signin\");\n        this.islogin = false;\n      });\n      this.router.navigateByUrl(\"sessions/signin\");\n      this.islogin = false;\n    }\n    reseteo(correo) {\n      return this.http.post(`${environment.apiURL}/tokens/user/reseteo`, correo);\n    }\n    actualizapass(usuario) {\n      return this.http.post(`${environment.apiURL}/tokens/user/actualizausu`, usuario);\n    }\n    permisousu(usuario) {\n      return this.http.post(`${environment.apiURL}/tokens/user/actualizapermiso`, usuario);\n    }\n    listapermiso(usuario) {\n      return this.http.post(`${environment.apiURL}/tokens/user/numeropermiso`, usuario);\n    }\n    permisobloq(usuario) {\n      return this.http.post(`${environment.apiURL}/tokens/user/notificacionbloqueo`, usuario);\n    }\n    isLoggedIn(dato) {\n      this.islogin = dato;\n      return dato;\n    }\n    getJwtToken() {\n      return this.ls.getItem(this.JWT_TOKEN);\n    }\n    getUser() {\n      return this.ls.getItem(this.APP_USER);\n    }\n    setUserAndToken(token, user, isAuthenticated) {\n      this.isAuthenticated = isAuthenticated;\n      this.token = token;\n      this.user = user;\n      this.user$.next(user);\n      this.ls.setItem(this.JWT_TOKEN, token);\n      this.ls.setItem(this.APP_USER, user);\n    }\n  }\n  JwtAuthService.ɵfac = function JwtAuthService_Factory(t) {\n    return new (t || JwtAuthService)(i0.ɵɵinject(i1.LocalStoreService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i3.ActivatedRoute), i0.ɵɵinject(i4.AuditoriaService));\n  };\n  JwtAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtAuthService,\n    factory: JwtAuthService.ɵfac,\n    providedIn: \"root\"\n  });\n  return JwtAuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}