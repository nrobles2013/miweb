{"ast":null,"code":"import { ErrorHandler, ApplicationRef, ChangeDetectorRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let ErrorHandlerService = /*#__PURE__*/(() => {\n  class ErrorHandlerService extends ErrorHandler {\n    constructor(injector) {\n      super();\n      this.injector = injector;\n      this.errorCount = 0;\n    }\n    // https://github.com/angular/angular/issues/17010\n    handleError(error) {\n      let increment = 5;\n      let max = 50;\n      // Prevents change detection\n      let debugCtx = error['ngDebugContext'];\n      let changeDetectorRef = debugCtx && debugCtx.injector.get(ChangeDetectorRef);\n      if (changeDetectorRef) changeDetectorRef.detach();\n      this.errorCount = this.errorCount + 1;\n      if (this.errorCount % increment === 0) {\n        console.log(' ');\n        console.log(`errorHandler() was called ${this.errorCount} times.`);\n        console.log(' ');\n        super.handleError(error);\n        if (this.errorCount === max) {\n          console.log(' ');\n          console.log(`Preventing recursive error after ${this.errorCount} recursive errors.`);\n          console.log(' ');\n          let appRef = this.injector.get(ApplicationRef);\n          appRef.tick();\n        }\n      } else if (this.errorCount === 1) {\n        super.handleError(error);\n      }\n    }\n  }\n  ErrorHandlerService.ɵfac = function ErrorHandlerService_Factory(t) {\n    return new (t || ErrorHandlerService)(i0.ɵɵinject(i0.Injector));\n  };\n  ErrorHandlerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorHandlerService,\n    factory: ErrorHandlerService.ɵfac\n  });\n  return ErrorHandlerService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}